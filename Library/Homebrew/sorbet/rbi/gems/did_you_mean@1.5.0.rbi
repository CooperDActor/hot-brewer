# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `did_you_mean` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module DidYouMean
  class << self
    def correct_error(error_class, spell_checker); end
    def formatter; end
    def formatter=(formatter); end
  end
end

class DidYouMean::ClassNameChecker
  def initialize(exception); end

  def class_name; end
  def class_names; end
  def corrections; end
  def scopes; end
end

class DidYouMean::ClassNameChecker::ClassName < ::String
  def initialize(name, namespace = T.unsafe(nil)); end

  def full_name; end
  def namespace; end
end

module DidYouMean::Correctable
  def corrections; end
  def original_message; end
  def spell_checker; end
  def to_s; end
end

module DidYouMean::Jaro
  private

  def distance(str1, str2); end

  class << self
    def distance(str1, str2); end
  end
end

module DidYouMean::JaroWinkler
  private

  def distance(str1, str2); end

  class << self
    def distance(str1, str2); end
  end
end

class DidYouMean::KeyErrorChecker
  def initialize(key_error); end

  def corrections; end

  private

  def exact_matches; end
end

module DidYouMean::Levenshtein
  private

  def distance(str1, str2); end
  def min3(a, b, c); end

  class << self
    def distance(str1, str2); end
    def min3(a, b, c); end
  end
end

class DidYouMean::MethodNameChecker
  def initialize(exception); end

  def corrections; end
  def method_name; end
  def method_names; end
  def names_to_exclude; end
  def receiver; end
end

DidYouMean::MethodNameChecker::RB_RESERVED_WORDS = T.let(T.unsafe(nil), Array)

class DidYouMean::NullChecker
  def initialize(*_arg0); end

  def corrections; end
end

class DidYouMean::PlainFormatter
  def message_for(corrections); end
end

class DidYouMean::RequirePathChecker
  def initialize(exception); end

  def corrections; end
  def path; end

  class << self
    def requireables; end
  end
end

DidYouMean::RequirePathChecker::ENV_SPECIFIC_EXT = T.let(T.unsafe(nil), String)
DidYouMean::RequirePathChecker::INITIAL_LOAD_PATH = T.let(T.unsafe(nil), Array)

class DidYouMean::SpellChecker
  def initialize(dictionary:); end

  def correct(input); end

  private

  def normalize(str_or_symbol); end
end

class DidYouMean::TreeSpellChecker
  def initialize(dictionary:, separator: T.unsafe(nil), augment: T.unsafe(nil)); end

  def augment; end
  def correct(input); end
  def dictionary; end
  def dictionary_without_leaves; end
  def dimensions; end
  def find_leaves(path); end
  def plausible_dimensions(input); end
  def possible_paths(states); end
  def separator; end
  def tree_depth; end

  private

  def correct_element(names, element); end
  def fall_back_to_normal_spell_check(input); end
  def find_ideas(paths, leaf); end
  def find_suggestions(input, plausibles); end
  def ideas_to_paths(ideas, leaf, names, path); end
  def normalize(str); end
end

class DidYouMean::VariableNameChecker
  def initialize(exception); end

  def corrections; end
  def cvar_names; end
  def ivar_names; end
  def lvar_names; end
  def method_names; end
  def name; end
end

DidYouMean::VariableNameChecker::RB_RESERVED_WORDS = T.let(T.unsafe(nil), Array)
